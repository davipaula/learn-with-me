WEBVTT
Kind: captions
Language: en

00:00:12.750 --> 00:00:17.259
The second half of the last century
was completely defined

00:00:17.283 --> 00:00:19.282
by a technological revolution:

00:00:19.306 --> 00:00:20.741
the software revolution.

00:00:21.313 --> 00:00:26.121
The ability to program electrons
on a material called silicon

00:00:26.145 --> 00:00:29.218
made possible technologies,
companies and industries

00:00:29.242 --> 00:00:33.219
that were at one point
unimaginable to many of us,

00:00:33.243 --> 00:00:37.158
but which have now fundamentally changed
the way the world works.

00:00:38.158 --> 00:00:40.079
The first half of this century, though,

00:00:40.103 --> 00:00:44.081
is going to be transformed
by a new software revolution:

00:00:44.105 --> 00:00:46.540
the living software revolution.

00:00:46.921 --> 00:00:50.971
And this will be powered by the ability
to program biochemistry

00:00:50.995 --> 00:00:53.290
on a material called biology.

00:00:53.314 --> 00:00:57.455
And doing so will enable us to harness
the properties of biology

00:00:57.479 --> 00:01:00.135
to generate new kinds of therapies,

00:01:00.159 --> 00:01:02.027
to repair damaged tissue,

00:01:02.051 --> 00:01:04.776
to reprogram faulty cells

00:01:04.800 --> 00:01:09.354
or even build programmable
operating systems out of biochemistry.

00:01:10.420 --> 00:01:13.993
If we can realize this --
and we do need to realize it --

00:01:14.017 --> 00:01:16.179
its impact will be so enormous

00:01:16.203 --> 00:01:20.080
that it will make the first
software revolution pale in comparison.

00:01:20.104 --> 00:01:24.338
And that's because living software
would transform the entirety of medicine,

00:01:24.362 --> 00:01:25.921
agriculture and energy,

00:01:25.945 --> 00:01:29.773
and these are sectors that dwarf
those dominated by IT.

00:01:30.812 --> 00:01:34.986
Imagine programmable plants
that fix nitrogen more effectively

00:01:35.010 --> 00:01:37.915
or resist emerging fungal pathogens,

00:01:37.939 --> 00:01:41.476
or even programming crops
to be perennial rather than annual

00:01:41.500 --> 00:01:43.768
so you could double
your crop yields each year.

00:01:43.792 --> 00:01:45.890
That would transform agriculture

00:01:45.914 --> 00:01:50.018
and how we'll keep our growing
and global population fed.

00:01:50.794 --> 00:01:53.056
Or imagine programmable immunity,

00:01:53.080 --> 00:01:57.318
designing and harnessing molecular devices
that guide your immune system

00:01:57.342 --> 00:02:01.172
to detect, eradicate
or even prevent disease.

00:02:01.196 --> 00:02:02.767
This would transform medicine

00:02:02.791 --> 00:02:06.280
and how we'll keep our growing
and aging population healthy.

00:02:07.501 --> 00:02:11.704
We already have many of the tools
that will make living software a reality.

00:02:11.728 --> 00:02:14.075
We can precisely edit genes with CRISPR.

00:02:14.099 --> 00:02:17.182
We can rewrite the genetic code
one base at a time.

00:02:17.206 --> 00:02:21.642
We can even build functioning
synthetic circuits out of DNA.

00:02:22.428 --> 00:02:24.897
But figuring out how and when
to wield these tools

00:02:24.921 --> 00:02:27.343
is still a process of trial and error.

00:02:27.367 --> 00:02:31.027
It needs deep expertise,
years of specialization.

00:02:31.051 --> 00:02:34.088
And experimental protocols
are difficult to discover

00:02:34.112 --> 00:02:36.694
and all too often, difficult to reproduce.

00:02:37.256 --> 00:02:41.729
And, you know, we have a tendency
in biology to focus a lot on the parts,

00:02:41.753 --> 00:02:44.886
but we all know that something like flying
wouldn't be understood

00:02:44.910 --> 00:02:46.249
by only studying feathers.

00:02:46.846 --> 00:02:51.367
So programming biology is not yet
as simple as programming your computer.

00:02:51.391 --> 00:02:53.069
And then to make matters worse,

00:02:53.093 --> 00:02:57.103
living systems largely bear no resemblance
to the engineered systems

00:02:57.127 --> 00:02:59.223
that you and I program every day.

00:02:59.691 --> 00:03:03.802
In contrast to engineered systems,
living systems self-generate,

00:03:03.826 --> 00:03:05.297
they self-organize,

00:03:05.321 --> 00:03:07.008
they operate at molecular scales.

00:03:07.032 --> 00:03:09.168
And these molecular-level interactions

00:03:09.192 --> 00:03:12.210
lead generally to robust
macro-scale output.

00:03:12.234 --> 00:03:14.954
They can even self-repair.

00:03:16.256 --> 00:03:19.250
Consider, for example,
the humble household plant,

00:03:19.274 --> 00:03:21.461
like that one sat
on your mantelpiece at home

00:03:21.485 --> 00:03:23.272
that you keep forgetting to water.

00:03:23.749 --> 00:03:27.364
Every day, despite your neglect,
that plant has to wake up

00:03:27.388 --> 00:03:30.135
and figure out how
to allocate its resources.

00:03:30.159 --> 00:03:33.730
Will it grow, photosynthesize,
produce seeds, or flower?

00:03:33.754 --> 00:03:37.693
And that's a decision that has to be made
at the level of the whole organism.

00:03:37.717 --> 00:03:41.198
But a plant doesn't have a brain
to figure all of that out.

00:03:41.222 --> 00:03:43.939
It has to make do
with the cells on its leaves.

00:03:43.963 --> 00:03:45.866
They have to respond to the environment

00:03:45.890 --> 00:03:48.539
and make the decisions
that affect the whole plant.

00:03:48.563 --> 00:03:52.551
So somehow there must be a program
running inside these cells,

00:03:52.575 --> 00:03:55.302
a program that responds
to input signals and cues

00:03:55.326 --> 00:03:57.266
and shapes what that cell will do.

00:03:57.679 --> 00:04:00.926
And then those programs must operate
in a distributed way

00:04:00.950 --> 00:04:02.287
across individual cells,

00:04:02.311 --> 00:04:06.434
so that they can coordinate
and that plant can grow and flourish.

00:04:07.675 --> 00:04:10.991
If we could understand
these biological programs,

00:04:11.015 --> 00:04:14.137
if we could understand
biological computation,

00:04:14.161 --> 00:04:18.098
it would transform our ability
to understand how and why

00:04:18.122 --> 00:04:19.668
cells do what they do.

00:04:20.152 --> 00:04:22.139
Because, if we understood these programs,

00:04:22.163 --> 00:04:24.296
we could debug them when things go wrong.

00:04:24.320 --> 00:04:28.513
Or we could learn from them how to design
the kind of synthetic circuits

00:04:28.537 --> 00:04:33.011
that truly exploit
the computational power of biochemistry.

00:04:34.407 --> 00:04:37.425
My passion about this idea
led me to a career in research

00:04:37.449 --> 00:04:41.080
at the interface of maths,
computer science and biology.

00:04:41.104 --> 00:04:45.830
And in my work, I focus on the concept
of biology as computation.

00:04:46.334 --> 00:04:49.476
And that means asking
what do cells compute,

00:04:49.500 --> 00:04:53.017
and how can we uncover
these biological programs?

00:04:53.760 --> 00:04:57.517
And I started to ask these questions
together with some brilliant collaborators

00:04:57.541 --> 00:05:00.112
at Microsoft Research
and the University of Cambridge,

00:05:00.136 --> 00:05:02.419
where together we wanted to understand

00:05:02.443 --> 00:05:06.620
the biological program
running inside a unique type of cell:

00:05:06.644 --> 00:05:08.538
an embryonic stem cell.

00:05:09.136 --> 00:05:12.296
These cells are unique
because they're totally na誰ve.

00:05:12.320 --> 00:05:14.488
They can become anything they want:

00:05:14.512 --> 00:05:17.077
a brain cell, a heart cell,
a bone cell, a lung cell,

00:05:17.101 --> 00:05:18.998
any adult cell type.

00:05:19.022 --> 00:05:20.699
This na誰vety, it sets them apart,

00:05:20.723 --> 00:05:23.724
but it also ignited the imagination
of the scientific community,

00:05:23.748 --> 00:05:27.011
who realized, if we could
tap into that potential,

00:05:27.035 --> 00:05:29.386
we would have a powerful
tool for medicine.

00:05:29.917 --> 00:05:32.538
If we could figure out
how these cells make the decision

00:05:32.562 --> 00:05:34.693
to become one cell type or another,

00:05:34.717 --> 00:05:36.407
we might be able to harness them

00:05:36.431 --> 00:05:40.984
to generate cells that we need
to repair diseased or damaged tissue.

00:05:41.794 --> 00:05:44.724
But realizing that vision
is not without its challenges,

00:05:44.748 --> 00:05:47.512
not least because these particular cells,

00:05:47.536 --> 00:05:50.365
they emerge just six days
after conception.

00:05:50.826 --> 00:05:52.881
And then within a day or so, they're gone.

00:05:52.905 --> 00:05:54.962
They have set off down the different paths

00:05:54.986 --> 00:05:58.036
that form all the structures
and organs of your adult body.

00:05:59.770 --> 00:06:02.849
But it turns out that cell fates
are a lot more plastic

00:06:02.873 --> 00:06:04.286
than we might have imagined.

00:06:04.310 --> 00:06:08.631
About 13 years ago, some scientists
showed something truly revolutionary.

00:06:09.393 --> 00:06:13.739
By inserting just a handful of genes
into an adult cell,

00:06:13.763 --> 00:06:15.527
like one of your skin cells,

00:06:15.551 --> 00:06:19.510
you can transform that cell
back to the na誰ve state.

00:06:19.534 --> 00:06:22.709
And it's a process that's actually
known as "reprogramming,"

00:06:22.733 --> 00:06:26.092
and it allows us to imagine
a kind of stem cell utopia,

00:06:26.116 --> 00:06:29.757
the ability to take a sample
of a patient's own cells,

00:06:29.781 --> 00:06:32.141
transform them back to the na誰ve state

00:06:32.165 --> 00:06:35.295
and use those cells to make
whatever that patient might need,

00:06:35.319 --> 00:06:37.394
whether it's brain cells or heart cells.

00:06:38.541 --> 00:06:40.306
But over the last decade or so,

00:06:40.330 --> 00:06:43.374
figuring out how to change cell fate,

00:06:43.398 --> 00:06:45.550
it's still a process of trial and error.

00:06:45.911 --> 00:06:50.419
Even in cases where we've uncovered
successful experimental protocols,

00:06:50.443 --> 00:06:51.910
they're still inefficient,

00:06:51.934 --> 00:06:56.172
and we lack a fundamental understanding
of how and why they work.

00:06:56.650 --> 00:06:59.655
If you figured out how to change
a stem cell into a heart cell,

00:06:59.679 --> 00:07:02.768
that hasn't got any way of telling you
how to change a stem cell

00:07:02.792 --> 00:07:03.993
into a brain cell.

00:07:04.633 --> 00:07:07.564
So we wanted to understand
the biological program

00:07:07.588 --> 00:07:10.035
running inside an embryonic stem cell,

00:07:10.059 --> 00:07:13.565
and understanding the computation
performed by a living system

00:07:13.589 --> 00:07:17.842
starts with asking
a devastatingly simple question:

00:07:17.866 --> 00:07:21.222
What is it that system actually has to do?

00:07:21.838 --> 00:07:24.688
Now, computer science actually
has a set of strategies

00:07:24.712 --> 00:07:28.539
for dealing with what it is the software
and hardware are meant to do.

00:07:28.563 --> 00:07:31.223
When you write a program,
you code a piece of software,

00:07:31.247 --> 00:07:33.247
you want that software to run correctly.

00:07:33.271 --> 00:07:35.061
You want performance, functionality.

00:07:35.085 --> 00:07:36.302
You want to prevent bugs.

00:07:36.326 --> 00:07:37.634
They can cost you a lot.

00:07:38.168 --> 00:07:40.010
So when a developer writes a program,

00:07:40.034 --> 00:07:42.304
they could write down
a set of specifications.

00:07:42.328 --> 00:07:44.199
These are what your program should do.

00:07:44.223 --> 00:07:46.491
Maybe it should compare
the size of two numbers

00:07:46.515 --> 00:07:48.307
or order numbers by increasing size.

00:07:49.037 --> 00:07:53.732
Technology exists that allows us
automatically to check

00:07:53.756 --> 00:07:56.134
whether our specifications are satisfied,

00:07:56.158 --> 00:07:58.791
whether that program
does what it should do.

00:07:59.266 --> 00:08:02.122
And so our idea was that in the same way,

00:08:02.146 --> 00:08:05.214
experimental observations,
things we measure in the lab,

00:08:05.238 --> 00:08:10.271
they correspond to specifications
of what the biological program should do.

00:08:10.769 --> 00:08:12.645
So we just needed to figure out a way

00:08:12.669 --> 00:08:15.852
to encode this new type of specification.

00:08:16.594 --> 00:08:20.248
So let's say you've been busy in the lab
and you've been measuring your genes

00:08:20.272 --> 00:08:22.708
and you've found that if Gene A is active,

00:08:22.732 --> 00:08:26.120
then Gene B or Gene C seems to be active.

00:08:26.678 --> 00:08:30.260
We can write that observation down
as a mathematical expression

00:08:30.284 --> 00:08:32.657
if we can use the language of logic:

00:08:33.125 --> 00:08:35.453
If A, then B or C.

00:08:36.242 --> 00:08:38.696
Now, this is a very simple example, OK.

00:08:38.720 --> 00:08:40.463
It's just to illustrate the point.

00:08:40.487 --> 00:08:43.411
We can encode truly rich expressions

00:08:43.435 --> 00:08:47.588
that actually capture the behavior
of multiple genes or proteins over time

00:08:47.612 --> 00:08:50.148
across multiple different experiments.

00:08:50.521 --> 00:08:53.147
And so by translating our observations

00:08:53.171 --> 00:08:55.164
into mathematical expression in this way,

00:08:55.188 --> 00:09:00.286
it becomes possible to test whether
or not those observations can emerge

00:09:00.310 --> 00:09:03.364
from a program of genetic interactions.

00:09:04.063 --> 00:09:06.619
And we developed a tool to do just this.

00:09:06.643 --> 00:09:09.525
We were able to use this tool
to encode observations

00:09:09.549 --> 00:09:10.956
as mathematical expressions,

00:09:10.980 --> 00:09:14.590
and then that tool would allow us
to uncover the genetic program

00:09:14.614 --> 00:09:16.152
that could explain them all.

00:09:17.481 --> 00:09:19.761
And we then apply this approach

00:09:19.785 --> 00:09:23.868
to uncover the genetic program
running inside embryonic stem cells

00:09:23.892 --> 00:09:28.081
to see if we could understand
how to induce that na誰ve state.

00:09:28.105 --> 00:09:30.057
And this tool was actually built

00:09:30.081 --> 00:09:32.733
on a solver that's deployed
routinely around the world

00:09:32.757 --> 00:09:35.026
for conventional software verification.

00:09:35.630 --> 00:09:39.321
So we started with a set
of nearly 50 different specifications

00:09:39.345 --> 00:09:43.851
that we generated from experimental
observations of embryonic stem cells.

00:09:43.875 --> 00:09:46.511
And by encoding these
observations in this tool,

00:09:46.535 --> 00:09:49.720
we were able to uncover
the first molecular program

00:09:49.744 --> 00:09:51.705
that could explain all of them.

00:09:52.309 --> 00:09:54.822
Now, that's kind of a feat
in and of itself, right?

00:09:54.846 --> 00:09:57.748
Being able to reconcile
all of these different observations

00:09:57.772 --> 00:10:00.839
is not the kind of thing
you can do on the back of an envelope,

00:10:00.863 --> 00:10:03.511
even if you have a really big envelope.

00:10:04.190 --> 00:10:06.348
Because we've got
this kind of understanding,

00:10:06.372 --> 00:10:07.834
we could go one step further.

00:10:07.858 --> 00:10:11.229
We could use this program to predict
what this cell might do

00:10:11.253 --> 00:10:13.429
in conditions we hadn't yet tested.

00:10:13.453 --> 00:10:15.854
We could probe the program in silico.

00:10:16.735 --> 00:10:17.982
And so we did just that:

00:10:18.006 --> 00:10:21.186
we generated predictions
that we tested in the lab,

00:10:21.210 --> 00:10:24.242
and we found that this program
was highly predictive.

00:10:24.266 --> 00:10:26.891
It told us how we could
accelerate progress

00:10:26.915 --> 00:10:29.975
back to the na誰ve state
quickly and efficiently.

00:10:29.999 --> 00:10:32.569
It told us which genes
to target to do that,

00:10:32.593 --> 00:10:35.217
which genes might even
hinder that process.

00:10:35.241 --> 00:10:40.231
We even found the program predicted
the order in which genes would switch on.

00:10:40.980 --> 00:10:44.120
So this approach really allowed us
to uncover the dynamics

00:10:44.144 --> 00:10:46.546
of what the cells are doing.

00:10:47.728 --> 00:10:51.370
What we've developed, it's not a method
that's specific to stem cell biology.

00:10:51.394 --> 00:10:54.078
Rather, it allows us to make sense
of the computation

00:10:54.102 --> 00:10:55.787
being carried out by the cell

00:10:55.811 --> 00:10:58.642
in the context of genetic interactions.

00:10:58.666 --> 00:11:00.954
So really, it's just one building block.

00:11:00.978 --> 00:11:03.663
The field urgently needs
to develop new approaches

00:11:03.687 --> 00:11:06.382
to understand biological
computation more broadly

00:11:06.406 --> 00:11:07.773
and at different levels,

00:11:07.797 --> 00:11:11.926
from DNA right through
to the flow of information between cells.

00:11:11.950 --> 00:11:14.747
Only this kind of
transformative understanding

00:11:14.771 --> 00:11:19.757
will enable us to harness biology
in ways that are predictable and reliable.

00:11:21.029 --> 00:11:24.071
But to program biology,
we will also need to develop

00:11:24.095 --> 00:11:26.090
the kinds of tools and languages

00:11:26.114 --> 00:11:29.522
that allow both experimentalists
and computational scientists

00:11:29.546 --> 00:11:32.043
to design biological function

00:11:32.067 --> 00:11:35.572
and have those designs compile down
to the machine code of the cell,

00:11:35.596 --> 00:11:36.777
its biochemistry,

00:11:36.801 --> 00:11:39.285
so that we could then
build those structures.

00:11:39.309 --> 00:11:42.982
Now, that's something akin
to a living software compiler,

00:11:43.006 --> 00:11:45.222
and I'm proud to be
part of a team at Microsoft

00:11:45.246 --> 00:11:46.898
that's working to develop one.

00:11:47.366 --> 00:11:50.592
Though to say it's a grand challenge
is kind of an understatement,

00:11:50.616 --> 00:11:51.789
but if it's realized,

00:11:51.813 --> 00:11:55.522
it would be the final bridge
between software and wetware.

00:11:57.006 --> 00:12:00.421
More broadly, though, programming biology
is only going to be possible

00:12:00.445 --> 00:12:04.724
if we can transform the field
into being truly interdisciplinary.

00:12:04.748 --> 00:12:07.700
It needs us to bridge
the physical and the life sciences,

00:12:07.724 --> 00:12:09.991
and scientists from
each of these disciplines

00:12:10.015 --> 00:12:12.746
need to be able to work together
with common languages

00:12:12.770 --> 00:12:15.489
and to have shared scientific questions.

00:12:16.757 --> 00:12:20.750
In the long term, it's worth remembering
that many of the giant software companies

00:12:20.774 --> 00:12:23.266
and the technology
that you and I work with every day

00:12:23.290 --> 00:12:24.793
could hardly have been imagined

00:12:24.817 --> 00:12:28.422
at the time we first started
programming on silicon microchips.

00:12:28.446 --> 00:12:31.477
And if we start now to think about
the potential for technology

00:12:31.501 --> 00:12:33.927
enabled by computational biology,

00:12:33.951 --> 00:12:36.886
we'll see some of the steps
that we need to take along the way

00:12:36.910 --> 00:12:38.343
to make that a reality.

00:12:39.231 --> 00:12:42.313
Now, there is the sobering thought
that this kind of technology

00:12:42.337 --> 00:12:44.114
could be open to misuse.

00:12:44.138 --> 00:12:46.301
If we're willing to talk
about the potential

00:12:46.325 --> 00:12:47.761
for programming immune cells,

00:12:47.785 --> 00:12:50.973
we should also be thinking
about the potential of bacteria

00:12:50.997 --> 00:12:52.658
engineered to evade them.

00:12:52.682 --> 00:12:54.769
There might be people willing to do that.

00:12:55.506 --> 00:12:57.228
Now, one reassuring thought in this

00:12:57.252 --> 00:12:59.541
is that -- well, less so
for the scientists --

00:12:59.565 --> 00:13:02.834
is that biology is
a fragile thing to work with.

00:13:02.858 --> 00:13:05.270
So programming biology
is not going to be something

00:13:05.294 --> 00:13:07.142
you'll be doing in your garden shed.

00:13:07.642 --> 00:13:09.722
But because we're at the outset of this,

00:13:09.746 --> 00:13:12.329
we can move forward
with our eyes wide open.

00:13:12.353 --> 00:13:14.677
We can ask the difficult
questions up front,

00:13:14.701 --> 00:13:17.741
we can put in place
the necessary safeguards

00:13:17.765 --> 00:13:20.562
and, as part of that,
we'll have to think about our ethics.

00:13:20.586 --> 00:13:23.758
We'll have to think about putting bounds
on the implementation

00:13:23.782 --> 00:13:25.280
of biological function.

00:13:25.604 --> 00:13:29.319
So as part of this, research in bioethics
will have to be a priority.

00:13:29.343 --> 00:13:31.750
It can't be relegated to second place

00:13:31.774 --> 00:13:34.288
in the excitement
of scientific innovation.

00:13:35.154 --> 00:13:38.628
But the ultimate prize,
the ultimate destination on this journey,

00:13:38.652 --> 00:13:42.096
would be breakthrough applications
and breakthrough industries

00:13:42.120 --> 00:13:45.564
in areas from agriculture and medicine
to energy and materials

00:13:45.588 --> 00:13:47.849
and even computing itself.

00:13:48.490 --> 00:13:51.638
Imagine, one day we could be powering
the planet sustainably

00:13:51.662 --> 00:13:53.521
on the ultimate green energy

00:13:53.545 --> 00:13:57.488
if we could mimic something
that plants figured out millennia ago:

00:13:57.512 --> 00:14:01.283
how to harness the sun's energy
with an efficiency that is unparalleled

00:14:01.307 --> 00:14:03.163
by our current solar cells.

00:14:03.695 --> 00:14:06.296
If we understood that program
of quantum interactions

00:14:06.320 --> 00:14:09.584
that allow plants to absorb
sunlight so efficiently,

00:14:09.608 --> 00:14:13.552
we might be able to translate that
into building synthetic DNA circuits

00:14:13.576 --> 00:14:16.489
that offer the material
for better solar cells.

00:14:17.349 --> 00:14:21.042
There are teams and scientists working
on the fundamentals of this right now,

00:14:21.066 --> 00:14:24.309
so perhaps if it got the right attention
and the right investment,

00:14:24.333 --> 00:14:26.613
it could be realized in 10 or 15 years.

00:14:27.457 --> 00:14:30.654
So we are at the beginning
of a technological revolution.

00:14:31.067 --> 00:14:34.288
Understanding this ancient type
of biological computation

00:14:34.312 --> 00:14:36.444
is the critical first step.

00:14:36.468 --> 00:14:37.785
And if we can realize this,

00:14:37.809 --> 00:14:40.651
we would enter in the era
of an operating system

00:14:40.675 --> 00:14:42.580
that runs living software.

00:14:42.604 --> 00:14:43.770
Thank you very much.

00:14:43.794 --> 00:14:46.484
(Applause)

