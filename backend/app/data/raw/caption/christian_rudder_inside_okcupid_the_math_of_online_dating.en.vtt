WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.000
Translator: Andrea McDonough
Reviewer: Bedirhan Cinar

00:00:17.903 --> 00:00:19.617
Hello, my name is Christian Rudder,

00:00:19.641 --> 00:00:21.850
and I was one of the founders of OkCupid.

00:00:21.874 --> 00:00:24.792
It's now one of the biggest
dating sites in the United States.

00:00:24.816 --> 00:00:27.207
Like most everyone at the site,
I was a math major,

00:00:27.231 --> 00:00:30.671
As you may expect, we're known
for the analytic approach we take to love.

00:00:30.695 --> 00:00:32.333
We call it our matching algorithm.

00:00:32.357 --> 00:00:34.945
Basically, OkCupid's matching
algorithm helps us decide

00:00:34.969 --> 00:00:36.845
whether two people should go on a date.

00:00:36.869 --> 00:00:38.741
We built our entire business around it.

00:00:38.765 --> 00:00:40.725
Now, algorithm is a fancy word,

00:00:40.749 --> 00:00:43.234
and people like to drop it
like it's this big thing.

00:00:43.258 --> 00:00:45.546
But really, an algorithm
is just a systematic,

00:00:45.570 --> 00:00:47.793
step-by-step way to solve a problem.

00:00:47.817 --> 00:00:49.994
It doesn't have to be fancy at all.

00:00:50.018 --> 00:00:51.169
Here in this lesson,

00:00:51.193 --> 00:00:54.201
I'm going to explain how we arrived
at our particular algorithm,

00:00:54.225 --> 00:00:55.636
so you can see how it's done.

00:00:55.660 --> 00:00:57.594
Now, why are algorithms even important?

00:00:57.618 --> 00:00:59.198
Why does this lesson even exist?

00:00:59.222 --> 00:01:02.642
Well, notice one very significant
phrase I used above:

00:01:02.666 --> 00:01:05.005
they are a step-by-step
way to solve a problem,

00:01:05.029 --> 00:01:08.447
and as you probably know, computers
excel at step-by-step processes.

00:01:08.471 --> 00:01:10.060
A computer without an algorithm

00:01:10.084 --> 00:01:12.808
is basically an expensive paperweight.

00:01:12.832 --> 00:01:15.821
And since computers are such
a pervasive part of everyday life,

00:01:15.845 --> 00:01:17.392
algorithms are everywhere.

00:01:18.590 --> 00:01:21.787
The math behind OkCupid's matching
algorithm is surprisingly simple.

00:01:21.811 --> 00:01:25.813
It's just some addition, multiplication,
a little bit of square roots.

00:01:25.837 --> 00:01:27.527
The tricky part in designing it

00:01:27.551 --> 00:01:30.116
was figuring out how to take
something mysterious,

00:01:30.140 --> 00:01:31.290
human attraction,

00:01:31.314 --> 00:01:34.098
and break it into components
that a computer can work with.

00:01:34.122 --> 00:01:36.675
The first thing we needed
to match people up was data,

00:01:36.699 --> 00:01:38.691
something for the algorithm to work with.

00:01:38.715 --> 00:01:41.873
The best way to get data quickly
from people is to just ask for it.

00:01:41.897 --> 00:01:44.624
So we decided that OkCupid
should ask users questions,

00:01:44.648 --> 00:01:47.005
stuff like, "Do you want
to have kids one day?"

00:01:47.029 --> 00:01:48.787
"How often do you brush your teeth?"

00:01:48.811 --> 00:01:50.203
"Do you like scary movies?"

00:01:50.675 --> 00:01:52.752
And big stuff like,
"Do you believe in God?"

00:01:53.843 --> 00:01:56.907
Now, a lot of the questions
are good for matching like with like,

00:01:56.931 --> 00:01:59.087
that is, when both people
answer the same way.

00:01:59.111 --> 00:02:01.659
For example, two people
who are both into scary movies

00:02:01.683 --> 00:02:05.004
are probably a better match
than one person who is and one who isn't.

00:02:05.028 --> 00:02:06.521
But what about a question like,

00:02:06.545 --> 00:02:08.607
"Do you like to be
the center of attention?"

00:02:08.631 --> 00:02:11.259
If both people in a relationship
are saying yes to this,

00:02:11.283 --> 00:02:13.376
they're going to have massive problems.

00:02:13.400 --> 00:02:14.645
We realized this early on,

00:02:14.669 --> 00:02:17.938
and so we decided we needed
a bit more data from each question.

00:02:17.962 --> 00:02:20.725
We had to ask people to specify
not only their own answer,

00:02:20.749 --> 00:02:23.014
but the answer they wanted
from someone else.

00:02:23.038 --> 00:02:24.539
That worked really well.

00:02:24.563 --> 00:02:26.167
But we needed one more dimension.

00:02:26.191 --> 00:02:28.834
Some questions tell you more
about a person than others.

00:02:28.858 --> 00:02:32.253
For example, a question
about politics, something like,

00:02:32.277 --> 00:02:34.565
"Which is worse:
book burning or flag burning?"

00:02:34.589 --> 00:02:37.399
might reveal more about someone
than their taste in movies.

00:02:37.423 --> 00:02:40.042
And it doesn't make sense
to weigh all things equally,

00:02:40.066 --> 00:02:41.662
so we added one final data point.

00:02:41.686 --> 00:02:43.710
For everything that OkCupid asks you,

00:02:43.734 --> 00:02:46.563
you have a chance to tell us
the role it plays in your life.

00:02:46.587 --> 00:02:48.906
And this ranges
from irrelevant to mandatory.

00:02:49.446 --> 00:02:52.668
So now, for every question,
we have three things for our algorithm:

00:02:52.692 --> 00:02:54.044
first, your answer;

00:02:54.617 --> 00:02:58.757
second, how you want someone else --
your potential match -- to answer;

00:02:58.781 --> 00:03:01.569
and third, how important
the question is to you at all.

00:03:02.710 --> 00:03:03.962
With all this information,

00:03:03.986 --> 00:03:07.104
OkCupid can figure out
how well two people will get along.

00:03:07.128 --> 00:03:10.134
The algorithm crunches the numbers
and gives us a result.

00:03:10.158 --> 00:03:11.310
As a practical example,

00:03:11.334 --> 00:03:13.859
let's look at how we'd match you
with another person.

00:03:13.883 --> 00:03:15.072
Let's call him "B."

00:03:16.023 --> 00:03:19.505
Your match percentage with B is based
on questions you've both answered.

00:03:19.529 --> 00:03:21.954
Let's call that set
of common questions "s."

00:03:22.559 --> 00:03:24.908
As a very simple example,
we use a small set "s"

00:03:24.932 --> 00:03:26.573
with just two questions in common,

00:03:26.597 --> 00:03:28.425
and compute a match from that.

00:03:28.449 --> 00:03:30.120
Here are our two example questions.

00:03:30.144 --> 00:03:32.525
The first one, let's say, is,
"How messy are you?"

00:03:32.549 --> 00:03:34.645
And the answer possibilities are:

00:03:34.669 --> 00:03:38.030
very messy, average and very organized.

00:03:38.054 --> 00:03:40.114
And let's say you answered
"very organized,"

00:03:40.138 --> 00:03:42.898
and you'd like someone else
to answer "very organized,"

00:03:42.922 --> 00:03:45.178
and the question is very important to you.

00:03:45.202 --> 00:03:46.694
Basically, you're a neat freak.

00:03:46.718 --> 00:03:49.586
You're neat, you want someone else
to be neat, and that's it.

00:03:49.610 --> 00:03:51.625
And let's say B is a little bit different.

00:03:51.649 --> 00:03:53.688
He answered "very organized" for himself,

00:03:53.712 --> 00:03:56.719
but "average" is OK with him
as an answer from someone else,

00:03:56.743 --> 00:03:59.145
and the question is only
a little important to him.

00:03:59.169 --> 00:04:02.062
Let's look at the second question,
from our previous example:

00:04:02.086 --> 00:04:04.142
"Do you like to be
the center of attention?"

00:04:04.166 --> 00:04:05.680
The answers are "yes" and "no."

00:04:05.704 --> 00:04:08.699
You've answered "no," you want
someone else to answer "no,"

00:04:08.723 --> 00:04:11.114
and the question is only
a little important to you.

00:04:11.138 --> 00:04:12.759
Now B, he's answered "yes."

00:04:12.783 --> 00:04:14.559
He wants someone else to answer "no,"

00:04:14.583 --> 00:04:16.857
because he wants the spotlight on him,

00:04:16.881 --> 00:04:19.311
and the question is somewhat
important to him.

00:04:19.335 --> 00:04:21.334
So, let's try to compute all of this.

00:04:21.972 --> 00:04:24.475
Our first step is, since we use
computers to do this,

00:04:24.499 --> 00:04:26.366
we need to assign numerical values

00:04:26.390 --> 00:04:29.017
to ideas like "somewhat
important" and "very important,"

00:04:29.041 --> 00:04:31.252
because computers need
everything in numbers.

00:04:31.276 --> 00:04:33.679
We at OkCupid decided
on the following scale:

00:04:33.703 --> 00:04:35.649
"Irrelevant" is worth 0.

00:04:36.173 --> 00:04:38.062
"A little important" is worth 1.

00:04:38.538 --> 00:04:40.347
"Somewhat important" is worth 10.

00:04:40.831 --> 00:04:42.585
"Very important" is 50.

00:04:42.609 --> 00:04:46.221
And "absolutely mandatory" is 250.

00:04:46.245 --> 00:04:48.876
Next, the algorithm makes
two simple calculations.

00:04:48.900 --> 00:04:52.146
The first is: How much did
B's answers satisfy you?

00:04:52.170 --> 00:04:55.963
That is, how many possible points
did B score on your scale?

00:04:55.987 --> 00:04:59.199
Well, you indicated that B's answer
to the first question,

00:04:59.223 --> 00:05:00.389
about messiness,

00:05:00.413 --> 00:05:01.763
was very important to you.

00:05:01.787 --> 00:05:04.017
It's worth 50 points and B got that right.

00:05:04.375 --> 00:05:06.112
The second question is worth only 1,

00:05:06.136 --> 00:05:08.414
because you said
it was only a little important.

00:05:08.438 --> 00:05:09.635
B got that wrong,

00:05:09.659 --> 00:05:12.441
so B's answers were 50
out of 51 possible points.

00:05:12.465 --> 00:05:15.073
That's 98% satisfactory. Pretty good.

00:05:15.097 --> 00:05:19.046
The second question the algorithm
looks at is: How much did you satisfy B?

00:05:19.070 --> 00:05:22.329
Well, B placed 1 point on your answer
to the messiness question

00:05:22.353 --> 00:05:24.306
and 10 on your answer to the second.

00:05:24.745 --> 00:05:28.132
Of those 11, that's 1 plus 10,
you earned 10 --

00:05:28.156 --> 00:05:30.751
you guys satisfied each other
on the second question.

00:05:30.775 --> 00:05:35.017
So your answers were 10 out of 11
equals 91 percent satisfactory to B.

00:05:35.041 --> 00:05:36.192
That's not bad.

00:05:36.216 --> 00:05:38.723
The final step is to take
these two match percentages

00:05:38.747 --> 00:05:40.613
and get one number for the both of you.

00:05:40.637 --> 00:05:43.248
To do this, the algorithm
multiplies your scores,

00:05:43.272 --> 00:05:44.937
then takes the nth root,

00:05:44.961 --> 00:05:47.144
where "n" is the number of questions.

00:05:47.168 --> 00:05:49.998
Because s, which is the number
of questions in this sample,

00:05:50.022 --> 00:05:51.863
is only 2,

00:05:51.887 --> 00:05:55.552
we have: match percentage
equals the square root

00:05:55.576 --> 00:05:58.472
of 98 percent times 91 percent.

00:05:58.496 --> 00:06:00.280
That equals 94 percent.

00:06:00.304 --> 00:06:03.508
That 94 percent is your match
percentage with B.

00:06:03.532 --> 00:06:06.775
It's a mathematical expression
of how happy you'd be with each other,

00:06:06.799 --> 00:06:07.982
based on what we know.

00:06:08.006 --> 00:06:09.792
Now, why does the algorithm multiply,

00:06:09.816 --> 00:06:12.585
as opposed to, say, average
the two match scores together,

00:06:12.609 --> 00:06:14.279
and do the square-root business?

00:06:14.303 --> 00:06:16.832
In general, this formula
is called the geometric mean.

00:06:16.856 --> 00:06:19.483
It's a great way to combine
values that have wide ranges

00:06:19.507 --> 00:06:21.422
and represent very different properties.

00:06:21.446 --> 00:06:23.859
In other words, it's perfect
for romantic matching.

00:06:23.883 --> 00:06:27.130
You've got wide ranges and you've got
tons of different data points,

00:06:27.154 --> 00:06:30.592
like I said, about movies, politics,
religion -- everything.

00:06:30.616 --> 00:06:32.454
Intuitively, too, this makes sense.

00:06:32.478 --> 00:06:35.253
Two people satisfying
each other 50 percent

00:06:35.277 --> 00:06:39.229
should be a better match
than two others who satisfy 0 and 100,

00:06:39.253 --> 00:06:41.067
because affection needs to be mutual.

00:06:41.091 --> 00:06:43.582
After adding a little correction
for margin of error,

00:06:43.606 --> 00:06:46.177
in the case where we have
a small number of questions,

00:06:46.201 --> 00:06:47.518
like we do in this example,

00:06:47.542 --> 00:06:48.714
we're good to go.

00:06:48.738 --> 00:06:50.650
Any time OkCupid matches two people,

00:06:50.674 --> 00:06:52.706
it goes through the steps
we just outlined.

00:06:52.730 --> 00:06:54.999
First it collects data about your answers,

00:06:55.023 --> 00:06:58.008
then it compares your choices
and preferences to other people's

00:06:58.032 --> 00:06:59.999
in simple, mathematical ways.

00:07:00.023 --> 00:07:02.946
This, the ability to take
real-world phenomena

00:07:02.970 --> 00:07:05.385
and make them something
a microchip can understand,

00:07:05.409 --> 00:07:08.686
is, I think, the most important skill
anyone can have these days.

00:07:08.710 --> 00:07:11.133
Like you use sentences
to tell a story to a person,

00:07:11.157 --> 00:07:13.641
you use algorithms
to tell a story to a computer.

00:07:14.349 --> 00:07:17.382
If you learn the language,
you can go out and tell your stories.

00:07:17.406 --> 00:07:19.159
I hope this will help you do that.

