WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.000
Translator: Andrea McDonough
Reviewer: Jessica Ruby

00:00:15.483 --> 00:00:16.831
What's an algorithm?

00:00:16.831 --> 00:00:17.662
In computer science,

00:00:17.662 --> 00:00:19.416
an algorithm is a set of instructions

00:00:19.416 --> 00:00:22.105
for solving some problem, step-by-step.

00:00:22.105 --> 00:00:24.377
Typically, algorithms are executed by computers,

00:00:24.377 --> 00:00:26.544
but we humans have algorithms as well.

00:00:26.544 --> 00:00:28.397
For instance, how would you go about counting

00:00:28.397 --> 00:00:30.217
the number of people in a room?

00:00:30.217 --> 00:00:31.432
Well, if you're like me,

00:00:31.432 --> 00:00:32.928
you probably point at each person,

00:00:32.928 --> 00:00:33.888
one at a time,

00:00:33.888 --> 00:00:35.725
and count up from 0:

00:00:35.725 --> 00:00:38.598
1, 2, 3, 4 and so forth.

00:00:38.598 --> 00:00:39.711
Well, that's an algorithm.

00:00:39.711 --> 00:00:40.845
In fact, let's try to express it

00:00:40.845 --> 00:00:43.074
a bit more formally in pseudocode,

00:00:43.074 --> 00:00:43.905
English-like syntax

00:00:43.905 --> 00:00:46.029
that resembles a programming language.

00:00:46.029 --> 00:00:47.796
Let n equal 0.

00:00:47.796 --> 00:00:52.588
For each person in room, set n = n + 1.

00:00:52.588 --> 00:00:54.085
How to interpret this pseudocode?

00:00:54.085 --> 00:00:55.921
Well, line 1 declares, so to speak,

00:00:55.921 --> 00:00:57.337
a variable called n

00:00:57.337 --> 00:00:59.716
and initializes its value to zero.

00:00:59.716 --> 00:01:02.051
This just means that at the beginning of our algorithm,

00:01:02.051 --> 00:01:03.635
the thing with which we're counting

00:01:03.635 --> 00:01:05.303
has a value of zero.

00:01:05.303 --> 00:01:06.639
After all, before we start counting,

00:01:06.639 --> 00:01:08.308
we haven't counted anything yet.

00:01:08.308 --> 00:01:10.556
Calling this variable n is just a convention.

00:01:10.556 --> 00:01:12.561
I could have called it almost anything.

00:01:12.561 --> 00:01:14.647
Now, line 2 demarks the start of loop,

00:01:14.647 --> 00:01:17.691
a sequence of steps that will repeat some number of times.

00:01:17.691 --> 00:01:19.485
So, in our example, the step we're taking

00:01:19.485 --> 00:01:21.219
is counting people in the room.

00:01:21.219 --> 00:01:22.982
Beneath line 2 is line 3,

00:01:22.982 --> 00:01:25.493
which describes exactly how we'll go about counting.

00:01:25.493 --> 00:01:27.743
The indentation implies that it's line 3

00:01:27.743 --> 00:01:28.965
that will repeat.

00:01:28.965 --> 00:01:30.184
So, what the pseudocode is saying

00:01:30.184 --> 00:01:32.250
is that after starting at zero,

00:01:32.250 --> 00:01:33.960
for each person in the room,

00:01:33.960 --> 00:01:36.178
we'll increase n by 1.

00:01:36.178 --> 00:01:38.507
Now, is this algorithm correct?

00:01:38.507 --> 00:01:40.115
Well, let's bang on it a bit.

00:01:40.115 --> 00:01:42.941
Does it work if there are 2 people in the room?

00:01:42.941 --> 00:01:43.721
Let's see.

00:01:43.721 --> 00:01:45.806
In line 1, we initialize n to zero.

00:01:45.806 --> 00:01:47.108
For each of these two people,

00:01:47.108 --> 00:01:49.276
we then increment n by 1.

00:01:49.276 --> 00:01:50.858
So, in the first trip through the loop,

00:01:50.858 --> 00:01:52.863
we update n from zero to 1,

00:01:52.863 --> 00:01:54.518
on the second trip through that same loop,

00:01:54.518 --> 00:01:56.767
we update n from 1 to 2.

00:01:56.767 --> 00:02:00.108
And so, by this algorithm's end, n is 2,

00:02:00.108 --> 00:02:02.221
which indeed matches the number of people in the room.

00:02:02.221 --> 00:02:03.444
So far, so good.

00:02:03.444 --> 00:02:05.196
How about a corner case, though?

00:02:05.196 --> 00:02:07.160
Suppose that there are zero people in the room,

00:02:07.160 --> 00:02:09.507
besides me, who's doing the counting.

00:02:09.507 --> 00:02:12.517
In line 1, we again initialize n to zero.

00:02:12.517 --> 00:02:15.039
This time, though, line 3 doesn't execute at all

00:02:15.039 --> 00:02:16.919
since there isn't a person in the room,

00:02:16.919 --> 00:02:18.543
and so, n remains zero,

00:02:18.543 --> 00:02:20.902
which indeed matches the number of people in the room.

00:02:20.902 --> 00:02:21.808
Pretty simple, right?

00:02:21.808 --> 00:02:25.024
But counting people one a time is pretty inefficient, too, no?

00:02:25.024 --> 00:02:26.592
Surely, we can do better!

00:02:26.592 --> 00:02:28.458
Why not count two people at a time?

00:02:28.458 --> 00:02:33.557
Instead of counting 1, 2, 3, 4, 5, 6, 7, 8, and so forth,

00:02:33.557 --> 00:02:34.475
why not count

00:02:34.475 --> 00:02:36.602
2, 4, 6, 8, and so on?

00:02:36.602 --> 00:02:39.020
It even sounds faster, and it surely is.

00:02:39.020 --> 00:02:41.855
Let's express this optimization in pseudocode.

00:02:41.855 --> 00:02:43.317
Let n equal zero.

00:02:43.317 --> 00:02:45.314
For each pair of people in room,

00:02:45.314 --> 00:02:47.902
set n = n + 2.

00:02:47.902 --> 00:02:49.575
Pretty simple change, right?

00:02:49.575 --> 00:02:51.366
Rather than count people one at a time,

00:02:51.366 --> 00:02:53.709
we instead count them two at a time.

00:02:53.709 --> 00:02:56.524
This algorithm's thus twice as fast as the last.

00:02:56.524 --> 00:02:57.870
But is it correct?

00:02:57.870 --> 00:02:58.664
Let's see.

00:02:58.664 --> 00:03:00.789
Does it work if there are 2 people in the room?

00:03:00.789 --> 00:03:03.131
In line 1, we initialize n to zero.

00:03:03.131 --> 00:03:06.399
For that one pair of people, we then increment n by 2.

00:03:06.399 --> 00:03:08.921
And so, by this algorithm's end, n is 2,

00:03:08.921 --> 00:03:11.303
which indeed matches the number of people in the room.

00:03:11.303 --> 00:03:13.715
Suppose next that there are zero people in the room.

00:03:13.715 --> 00:03:16.302
In line 1, we initialize n to zero.

00:03:16.302 --> 00:03:18.382
As before, line 3 doesn't execute at all

00:03:18.382 --> 00:03:20.724
since there aren't any pairs of people in the room,

00:03:20.724 --> 00:03:22.410
and so, n remains zero,

00:03:22.410 --> 00:03:25.183
which indeed matches the number of people in the room.

00:03:25.183 --> 00:03:27.555
But what if there are 3 people in the room?

00:03:27.555 --> 00:03:29.492
How does this algorithm fair?

00:03:29.492 --> 00:03:30.321
Let's see.

00:03:30.321 --> 00:03:32.991
In line 1, we initialize n to zero.

00:03:32.991 --> 00:03:34.281
For a pair of those people,

00:03:34.281 --> 00:03:36.197
we then increment n by 2,

00:03:36.197 --> 00:03:37.189
but then what?

00:03:37.189 --> 00:03:39.451
There isn't another full pair of people in the room,

00:03:39.451 --> 00:03:41.661
so line 2 no longer applies.

00:03:41.661 --> 00:03:43.330
And so, by this algorithm's end,

00:03:43.330 --> 00:03:45.926
n is still 2, which isn't correct.

00:03:45.926 --> 00:03:48.258
Indeed this algorithm is said to be buggy

00:03:48.258 --> 00:03:49.406
because it has a mistake.

00:03:49.406 --> 00:03:51.302
Let's redress with some new pseudocode.

00:03:51.302 --> 00:03:53.095
Let n equal zero.

00:03:53.095 --> 00:03:55.218
For each pair of people in room,

00:03:55.218 --> 00:03:57.640
set n = n + 2.

00:03:57.640 --> 00:04:00.099
If 1 person remains unpaired,

00:04:00.099 --> 00:04:02.475
set n = n + 1.

00:04:02.475 --> 00:04:03.982
To solve this particular problem,

00:04:03.982 --> 00:04:06.231
we've introduced in line 4 a condition,

00:04:06.231 --> 00:04:08.066
otherwise known as a branch,

00:04:08.066 --> 00:04:10.319
that only executes if there is one person

00:04:10.319 --> 00:04:12.195
we could not pair with another.

00:04:12.195 --> 00:04:14.260
So now, whether there's 1 or 3

00:04:14.260 --> 00:04:16.533
or any odd number of people in the room,

00:04:16.533 --> 00:04:18.821
this algorithm will now count them.

00:04:18.821 --> 00:04:20.166
Can we do even better?

00:04:20.166 --> 00:04:23.460
Well, we could count in 3's or 4's or even 5's and 10's,

00:04:23.460 --> 00:04:24.760
but beyond that it's going to get

00:04:24.760 --> 00:04:26.630
a little bit difficult to point.

00:04:26.630 --> 00:04:27.567
At the end of the day,

00:04:27.567 --> 00:04:29.831
whether executed by computers or humans,

00:04:29.831 --> 00:04:31.791
algorithms are just a set of instructions

00:04:31.791 --> 00:04:33.629
with which to solve problems.

00:04:33.629 --> 00:04:35.372
These were just three.

00:04:35.372 --> 00:04:38.354
What problem would you solve with an algorithm?

