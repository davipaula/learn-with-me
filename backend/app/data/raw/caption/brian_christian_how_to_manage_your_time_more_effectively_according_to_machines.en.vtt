WEBVTT
Kind: captions
Language: en

00:00:13.962 --> 00:00:16.132
In the summer of 1997,

00:00:16.132 --> 00:00:20.611
NASA's Pathfinder spacecraft landed 
on the surface of Mars,

00:00:20.611 --> 00:00:25.241
and began transmitting incredible,
iconic images back to Earth.

00:00:25.241 --> 00:00:28.480
But several days in, 
something went terribly wrong.

00:00:28.480 --> 00:00:30.662
The transmissions stopped.

00:00:30.662 --> 00:00:34.232
Pathfinder was, in effect, 
procrastinating:

00:00:34.232 --> 00:00:39.691
keeping itself fully occupied 
but failing to do its most important work.

00:00:39.691 --> 00:00:40.901
What was going on?

00:00:40.901 --> 00:00:44.933
There was a bug, it turned out, 
in its scheduler.

00:00:44.933 --> 00:00:48.203
Every operating system has something 
called the scheduler

00:00:48.203 --> 00:00:52.544
that tells the CPU how long
to work on each task before switching,

00:00:52.544 --> 00:00:54.414
and what to switch to.

00:00:54.414 --> 00:00:58.863
Done right, computers move so fluidly 
between their various responsibilities,

00:00:58.863 --> 00:01:02.343
they give the illusion 
of doing everything simultaneously.

00:01:02.343 --> 00:01:06.446
But we all know what happens
when things go wrong.

00:01:06.446 --> 00:01:10.462
This should give us, if nothing else, 
some measure of consolation.

00:01:10.462 --> 00:01:13.555
Even computers get overwhelmed sometimes.

00:01:13.555 --> 00:01:16.636
Maybe learning about the computer science 
of scheduling

00:01:16.636 --> 00:01:21.025
can give us some ideas about our own
human struggles with time.

00:01:21.025 --> 00:01:25.644
One of the first insights is that all 
the time you spend prioritizing your work

00:01:25.644 --> 00:01:28.775
is time you aren't spending doing it.

00:01:28.775 --> 00:01:33.074
For instance, let's say when you check 
your inbox, you scan all the messages,

00:01:33.074 --> 00:01:35.374
choosing which is the most important.

00:01:35.374 --> 00:01:37.703
Once you've dealt with that one, 
you repeat.

00:01:37.703 --> 00:01:40.052
Seems sensible, 
but there's a problem here.

00:01:40.052 --> 00:01:43.925
This is what's known 
as a quadratic-time algorithm.

00:01:43.925 --> 00:01:49.387
With an inbox that's twice as
full, these passes will take twice as long

00:01:49.387 --> 00:01:51.875
and you'll need to do 
twice as many of them!

00:01:51.875 --> 00:01:55.085
This means four times the work.

00:01:55.085 --> 00:01:57.615
The programmers 
of the operating system Linux

00:01:57.615 --> 00:02:01.273
encountered a similar problem in 2003.

00:02:01.273 --> 00:02:05.816
Linux would rank every single 
one of its tasks in order of importance,

00:02:05.816 --> 00:02:10.276
and sometimes spent more time 
ranking tasks than doing them.

00:02:10.276 --> 00:02:14.606
The programmers’ counterintuitive solution
was to replace this full ranking

00:02:14.606 --> 00:02:18.107
with a limited number 
of priority “buckets.”

00:02:18.107 --> 00:02:21.287
The system was less precise 
about what to do next

00:02:21.287 --> 00:02:26.191
but more than made up for it 
by spending more time making progress.

00:02:26.191 --> 00:02:30.909
So with your emails, insisting on always 
doing the very most important thing first

00:02:30.909 --> 00:02:32.890
could lead to a meltdown.

00:02:32.890 --> 00:02:35.783
Waking up to an inbox three times fuller 
than normal

00:02:35.783 --> 00:02:38.967
could take nine times longer to clear.

00:02:38.967 --> 00:02:43.718
You’d be better off replying 
in chronological order, or even at random!

00:02:43.718 --> 00:02:47.886
Surprisingly, sometimes giving up 
on doing things in the perfect order

00:02:47.886 --> 00:02:51.037
may be the key to getting them done.

00:02:51.037 --> 00:02:53.866
Another insight that emerges 
from computer scheduling

00:02:53.866 --> 00:02:58.638
has to do with one of the most prevalent 
features of modern life: interruptions.

00:02:58.638 --> 00:03:01.509
When a computer goes 
from one task to another,

00:03:01.509 --> 00:03:04.696
it has to do what's called 
a context switch,

00:03:04.696 --> 00:03:07.029
bookmarking its place in one task,

00:03:07.029 --> 00:03:11.448
moving old data out of its memory 
and new data in.

00:03:11.448 --> 00:03:14.028
Each of these actions comes at a cost.

00:03:14.028 --> 00:03:16.858
The insight here is that there’s 
a fundamental tradeoff

00:03:16.858 --> 00:03:20.029
between productivity and responsiveness.

00:03:20.029 --> 00:03:23.830
Getting serious work done 
means minimizing context switches.

00:03:23.830 --> 00:03:28.549
But being responsive means reacting 
anytime something comes up.

00:03:28.549 --> 00:03:32.401
These two principles 
are fundamentally in tension.

00:03:32.401 --> 00:03:34.899
Recognizing this tension allows us

00:03:34.899 --> 00:03:37.880
to decide where 
we want to strike that balance.

00:03:37.880 --> 00:03:41.639
The obvious solution 
is to minimize interruptions.

00:03:41.639 --> 00:03:45.242
The less obvious one is to group them.

00:03:45.242 --> 00:03:48.760
If no notification 
or email requires a response

00:03:48.760 --> 00:03:52.011
more urgently than once an hour, say,

00:03:52.011 --> 00:03:56.590
then that’s exactly how often 
you should check them. No more.

00:03:56.590 --> 00:04:02.029
In computer science, this idea goes by 
the name of interrupt coalescing.

00:04:02.029 --> 00:04:04.631
Rather than dealing with 
things as they come up –

00:04:04.631 --> 00:04:05.981
Oh, the mouse was moved?

00:04:05.981 --> 00:04:07.071
A key was pressed?

00:04:07.071 --> 00:04:08.792
More of that file downloaded? –

00:04:08.792 --> 00:04:11.549
the system groups these 
interruptions together

00:04:11.549 --> 00:04:14.721
based on how long they can afford to wait.

00:04:14.721 --> 00:04:17.648
In 2013, interrupt coalescing

00:04:17.648 --> 00:04:21.942
triggered a massive improvement 
in laptop battery life.

00:04:21.942 --> 00:04:26.753
This is because deferring interruptions 
lets a system check everything at once,

00:04:26.753 --> 00:04:30.623
then quickly re-enter a low-power state.

00:04:30.623 --> 00:04:33.212
As with computers, so it is with us.

00:04:33.212 --> 00:04:35.641
Perhaps adopting a similar approach

00:04:35.641 --> 00:04:39.471
might allow us users 
to reclaim our own attention,

00:04:39.471 --> 00:04:44.644
and give us back one of the things
that feels so rare in modern life: rest.

