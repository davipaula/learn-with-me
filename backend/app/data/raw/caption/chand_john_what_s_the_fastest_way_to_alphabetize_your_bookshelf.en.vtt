WEBVTT
Kind: captions
Language: en

00:00:06.911 --> 00:00:09.177
You work at the college library.

00:00:09.177 --> 00:00:11.397
You're in the middle of a quiet afternoon

00:00:11.397 --> 00:00:18.011
when suddenly a shipment of 1,280
different books arrives.

00:00:18.011 --> 00:00:21.690
The books have been dropped of
in one long straight line,

00:00:21.690 --> 00:00:23.288
but they're all out of order,

00:00:23.288 --> 00:00:27.031
and the automatic sorting 
system is broken.

00:00:27.031 --> 00:00:29.667
To make matters worse,
classes start tomorrow,

00:00:29.667 --> 00:00:32.005
which means that 
first thing in the morning,

00:00:32.005 --> 00:00:36.557
students will show up in droves
looking for these books.

00:00:36.557 --> 00:00:39.493
How can you get them all sorted in time?

00:00:39.493 --> 00:00:44.779
One way would be to start at one end
of the line with the first pair of books.

00:00:44.779 --> 00:00:48.626
If the first two books are in order,
then leave them as they are.

00:00:48.626 --> 00:00:50.920
Otherwise, swap them.

00:00:50.920 --> 00:00:53.216
Then, look at the second and third books,

00:00:53.216 --> 00:00:54.879
repeat the process,

00:00:54.879 --> 00:00:57.935
and continue until you reach 
the end of the line.

00:00:57.935 --> 00:01:01.185
At some point, you'll come across
the book that should be last,

00:01:01.185 --> 00:01:04.710
and keep swapping it with every
subsequent book,

00:01:04.710 --> 00:01:09.280
moving it down the line until it
reaches the end where it belongs.

00:01:09.280 --> 00:01:12.225
Then, start from the beginning
and repeat the process

00:01:12.225 --> 00:01:15.510
to get the second to last book
in its proper place,

00:01:15.510 --> 00:01:18.821
and keep going until all books are sorted.

00:01:18.821 --> 00:01:21.862
This approach is called Bubble Sort.

00:01:21.862 --> 00:01:24.156
It's simple but slow.

00:01:24.156 --> 00:01:29.331
You'd make 1,279 comparisons
in the first round,

00:01:29.331 --> 00:01:33.623
then 1,278, and so on,

00:01:33.623 --> 00:01:38.542
adding up to 818,560 comparisons.

00:01:38.542 --> 00:01:44.273
If each took just one second,
the process would take over nine days.

00:01:44.273 --> 00:01:48.569
A second strategy would be to start
by sorting just the first two books.

00:01:48.569 --> 00:01:53.733
Then, take the third book and compare it
with the book in the second spot.

00:01:53.733 --> 00:01:57.173
If it belongs before the second book,
swap them,

00:01:57.173 --> 00:01:59.641
then compare it 
with the book in the first spot,

00:01:59.641 --> 00:02:01.682
and swap again if needed.

00:02:01.682 --> 00:02:03.880
Now you've sorted the first three books.

00:02:03.880 --> 00:02:07.732
Keep adding one book at a time
to the sorted sub-line,

00:02:07.732 --> 00:02:11.809
comparing and swapping the new book
with the one before it

00:02:11.809 --> 00:02:16.004
until it's correctly placed
among the books sorted so far.

00:02:16.004 --> 00:02:18.213
This is called Insertion Sort.

00:02:18.213 --> 00:02:22.944
Unlike Bubble Sort, it usually doesn't
require comparing every pair of books.

00:02:22.944 --> 00:02:26.954
On average, we'd expect to only need
to compare each book

00:02:26.954 --> 00:02:29.414
to half of the books that came before it.

00:02:29.414 --> 00:02:32.123
In that case, the total 
number of comparisons

00:02:32.123 --> 00:02:35.983
would be 409,280,

00:02:35.983 --> 00:02:38.135
taking almost five days.

00:02:38.135 --> 00:02:40.624
You're still doing 
way too many comparisons.

00:02:40.624 --> 00:02:42.515
Here's a better idea.

00:02:42.515 --> 00:02:44.885
First, pick a random book.

00:02:44.885 --> 00:02:49.606
Call it the partition and compare it
to every other book.

00:02:49.606 --> 00:02:51.515
Then, divide the line

00:02:51.515 --> 00:02:55.666
by placing all the books 
that come before the partition on its left

00:02:55.666 --> 00:02:58.825
and all the ones that come after it
on its right.

00:02:58.825 --> 00:03:00.415
You've just saved loads of time

00:03:00.415 --> 00:03:03.845
by not having to compare 
any of the books on the left

00:03:03.845 --> 00:03:07.245
to any of the ones 
on the right ever again.

00:03:07.245 --> 00:03:09.665
Now, looking only 
at the books on the left,

00:03:09.665 --> 00:03:12.542
you can again pick a random partition book

00:03:12.542 --> 00:03:17.266
and separate those books that come
before it from those that come after it.

00:03:17.266 --> 00:03:19.736
You can keep creating 
sub-partitions like this

00:03:19.736 --> 00:03:22.384
until you have a bunch of small sub-lines,

00:03:22.384 --> 00:03:27.764
each of which you'd sort quickly using
another strategy, like Insertion Sort.

00:03:27.764 --> 00:03:32.926
Each round of partitioning requires
about 1,280 comparisons.

00:03:32.926 --> 00:03:35.466
If your partitions are pretty balanced,

00:03:35.466 --> 00:03:41.256
dividing the books into 128 sub-lines of ten
would take about seven rounds,

00:03:41.256 --> 00:03:43.947
or 8,960 seconds.

00:03:43.947 --> 00:03:48.736
Sorting these sub-lines would add
about 22 seconds each.

00:03:48.736 --> 00:03:51.817
All in all, this method 
known as QuickSort

00:03:51.817 --> 00:03:54.883
could sort the books 
in under three and a half hours.

00:03:54.883 --> 00:03:55.997
But there's a catch.

00:03:55.997 --> 00:03:59.575
Your partitions could end up lopsided,
saving no time at all.

00:03:59.575 --> 00:04:01.477
Luckily, this rarely happens.

00:04:01.477 --> 00:04:04.910
That's why QuickSort is one of the most
efficient strategies

00:04:04.910 --> 00:04:06.916
used by programmers today.

00:04:06.916 --> 00:04:10.847
They use it for things like sorting items
in an online store by price,

00:04:10.847 --> 00:04:14.858
or creating a list of all the gas stations
close to a given location

00:04:14.858 --> 00:04:16.379
sorted by distance.

00:04:16.379 --> 00:04:20.407
In your case, you're done quick sorting
with time to spare.

00:04:20.407 --> 00:04:22.668
Just another high-stakes day 
in the library.

