{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useInput, warning } from 'ra-core';\nimport sanitizeInputRestProps from './sanitizeInputRestProps';\nimport CheckboxGroupInputItem from './CheckboxGroupInputItem';\nimport InputHelperText from './InputHelperText';\nimport classnames from 'classnames';\nimport Labeled from './Labeled';\nimport { LinearProgress } from '../layout';\n\nvar sanitizeRestProps = function (_a) {\n  var setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      loaded = _a.loaded,\n      rest = __rest(_a, [\"setFilter\", \"setPagination\", \"setSort\", \"loaded\"]);\n\n  return sanitizeInputRestProps(rest);\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    label: {\n      transform: 'translate(0, 8px) scale(0.75)',\n      transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right')\n    }\n  };\n}, {\n  name: 'RaCheckboxGroupInput'\n});\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceArrayInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\n\nvar CheckboxGroupInput = function (props) {\n  var _a = props.choices,\n      choices = _a === void 0 ? [] : _a,\n      className = props.className,\n      classesOverride = props.classes,\n      format = props.format,\n      helperText = props.helperText,\n      label = props.label,\n      loaded = props.loaded,\n      loading = props.loading,\n      _b = props.margin,\n      margin = _b === void 0 ? 'dense' : _b,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      optionText = props.optionText,\n      optionValue = props.optionValue,\n      options = props.options,\n      parse = props.parse,\n      resource = props.resource,\n      row = props.row,\n      source = props.source,\n      translate = props.translate,\n      translateChoice = props.translateChoice,\n      validate = props.validate,\n      rest = __rest(props, [\"choices\", \"className\", \"classes\", \"format\", \"helperText\", \"label\", \"loaded\", \"loading\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"optionText\", \"optionValue\", \"options\", \"parse\", \"resource\", \"row\", \"source\", \"translate\", \"translateChoice\", \"validate\"]);\n\n  var classes = useStyles(props);\n  warning(source === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the source prop\");\n  warning(choices === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the choices prop\");\n\n  var _c = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _c.id,\n      _d = _c.input,\n      finalFormOnChange = _d.onChange,\n      finalFormOnBlur = _d.onBlur,\n      value = _d.value,\n      isRequired = _c.isRequired,\n      _e = _c.meta,\n      error = _e.error,\n      submitError = _e.submitError,\n      touched = _e.touched;\n\n  var handleCheck = useCallback(function (event, isChecked) {\n    var newValue;\n\n    try {\n      // try to convert string value to number, e.g. '123'\n      newValue = JSON.parse(event.target.value);\n    } catch (e) {\n      // impossible to convert value, e.g. 'abc'\n      newValue = event.target.value;\n    }\n\n    if (isChecked) {\n      finalFormOnChange(__spreadArrays(value || [], [newValue]));\n    } else {\n      finalFormOnChange(value.filter(function (v) {\n        return v != newValue;\n      })); // eslint-disable-line eqeqeq\n    }\n\n    finalFormOnBlur(); // HACK: See https://github.com/final-form/react-final-form/issues/365#issuecomment-515045503\n  }, [finalFormOnChange, finalFormOnBlur, value]);\n\n  if (loading) {\n    return React.createElement(Labeled, {\n      label: label,\n      source: source,\n      resource: resource,\n      className: className,\n      isRequired: isRequired\n    }, React.createElement(LinearProgress, null));\n  }\n\n  return React.createElement(FormControl, __assign({\n    component: \"fieldset\",\n    margin: margin,\n    error: touched && !!(error || submitError),\n    className: classnames(classes.root, className)\n  }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n    component: \"legend\",\n    className: classes.label\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(FormGroup, {\n    row: row\n  }, choices.map(function (choice) {\n    return React.createElement(CheckboxGroupInputItem, {\n      key: get(choice, optionValue),\n      choice: choice,\n      id: id,\n      onChange: handleCheck,\n      options: options,\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice,\n      value: value\n    });\n  })), React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error || submitError,\n    helperText: helperText\n  })));\n};\n\nCheckboxGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  className: PropTypes.string,\n  label: PropTypes.string,\n  source: PropTypes.string,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  row: PropTypes.bool,\n  resource: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nCheckboxGroupInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true,\n  fullWidth: true,\n  row: true\n};\nexport default CheckboxGroupInput;","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/input/CheckboxGroupInput.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__spreadArrays","il","r","Array","k","a","j","jl","React","useCallback","PropTypes","get","FormLabel","FormControl","FormGroup","FormHelperText","makeStyles","FieldTitle","useInput","warning","sanitizeInputRestProps","CheckboxGroupInputItem","InputHelperText","classnames","Labeled","LinearProgress","sanitizeRestProps","_a","setFilter","setPagination","setSort","loaded","rest","useStyles","theme","root","label","transform","transformOrigin","direction","name","CheckboxGroupInput","props","choices","className","classesOverride","classes","format","helperText","loading","_b","margin","onBlur","onChange","onFocus","optionText","optionValue","options","parse","resource","row","source","translate","translateChoice","validate","undefined","_c","id","_d","input","finalFormOnChange","finalFormOnBlur","value","isRequired","_e","meta","error","submitError","touched","handleCheck","event","isChecked","newValue","JSON","target","filter","v","createElement","component","map","choice","key","propTypes","arrayOf","object","string","oneOfType","func","element","bool","defaultProps","fullWidth"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,IAAIO,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUV,CAAV,EAAaW,CAAb,EAAgB;AAClD,MAAIZ,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIM,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,KAA8CM,CAAC,CAACC,OAAF,CAAUP,CAAV,IAAe,CAAjE,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;;AACJ,MAAIL,CAAC,IAAI,IAAL,IAAa,OAAOH,MAAM,CAACgB,qBAAd,KAAwC,UAAzD,EACI,KAAK,IAAIZ,CAAC,GAAG,CAAR,EAAWI,CAAC,GAAGR,MAAM,CAACgB,qBAAP,CAA6Bb,CAA7B,CAApB,EAAqDC,CAAC,GAAGI,CAAC,CAACD,MAA3D,EAAmEH,CAAC,EAApE,EAAwE;AACpE,QAAIU,CAAC,CAACC,OAAF,CAAUP,CAAC,CAACJ,CAAD,CAAX,IAAkB,CAAlB,IAAuBJ,MAAM,CAACS,SAAP,CAAiBQ,oBAAjB,CAAsCN,IAAtC,CAA2CR,CAA3C,EAA8CK,CAAC,CAACJ,CAAD,CAA/C,CAA3B,EACIF,CAAC,CAACM,CAAC,CAACJ,CAAD,CAAF,CAAD,GAAUD,CAAC,CAACK,CAAC,CAACJ,CAAD,CAAF,CAAX;AACP;AACL,SAAOF,CAAP;AACH,CAVD;;AAWA,IAAIgB,cAAc,GAAI,QAAQ,KAAKA,cAAd,IAAiC,YAAY;AAC9D,OAAK,IAAIf,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBe,EAAE,GAAGb,SAAS,CAACC,MAAtC,EAA8CH,CAAC,GAAGe,EAAlD,EAAsDf,CAAC,EAAvD,EAA2DD,CAAC,IAAIG,SAAS,CAACF,CAAD,CAAT,CAAaG,MAAlB;;AAC3D,OAAK,IAAIa,CAAC,GAAGC,KAAK,CAAClB,CAAD,CAAb,EAAkBmB,CAAC,GAAG,CAAtB,EAAyBlB,CAAC,GAAG,CAAlC,EAAqCA,CAAC,GAAGe,EAAzC,EAA6Cf,CAAC,EAA9C,EACI,KAAK,IAAImB,CAAC,GAAGjB,SAAS,CAACF,CAAD,CAAjB,EAAsBoB,CAAC,GAAG,CAA1B,EAA6BC,EAAE,GAAGF,CAAC,CAAChB,MAAzC,EAAiDiB,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIF,CAAC,EAA/D,EACIF,CAAC,CAACE,CAAD,CAAD,GAAOC,CAAC,CAACC,CAAD,CAAR;;AACR,SAAOJ,CAAP;AACH,CAND;;AAOA,OAAO,KAAKM,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,OAA/B,QAA8C,SAA9C;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,cAAT,QAA+B,WAA/B;;AACA,IAAIC,iBAAiB,GAAG,UAAUC,EAAV,EAAc;AAClC,MAAIC,SAAS,GAAGD,EAAE,CAACC,SAAnB;AAAA,MAA8BC,aAAa,GAAGF,EAAE,CAACE,aAAjD;AAAA,MAAgEC,OAAO,GAAGH,EAAE,CAACG,OAA7E;AAAA,MAAsFC,MAAM,GAAGJ,EAAE,CAACI,MAAlG;AAAA,MAA0GC,IAAI,GAAGrC,MAAM,CAACgC,EAAD,EAAK,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,EAA0C,QAA1C,CAAL,CAAvH;;AACA,SAAOP,sBAAsB,CAACY,IAAD,CAA7B;AACH,CAHD;;AAIA,IAAIC,SAAS,GAAGjB,UAAU,CAAC,UAAUkB,KAAV,EAAiB;AAAE,SAAQ;AAClDC,IAAAA,IAAI,EAAE,EAD4C;AAElDC,IAAAA,KAAK,EAAE;AACHC,MAAAA,SAAS,EAAE,+BADR;AAEHC,MAAAA,eAAe,EAAE,UAAUJ,KAAK,CAACK,SAAN,KAAoB,KAApB,GAA4B,MAA5B,GAAqC,OAA/C;AAFd;AAF2C,GAAR;AAMzC,CANqB,EAMnB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CANmB,CAA1B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB,GAAG,UAAUC,KAAV,EAAiB;AACtC,MAAIf,EAAE,GAAGe,KAAK,CAACC,OAAf;AAAA,MAAwBA,OAAO,GAAGhB,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAvD;AAAA,MAA2DiB,SAAS,GAAGF,KAAK,CAACE,SAA7E;AAAA,MAAwFC,eAAe,GAAGH,KAAK,CAACI,OAAhH;AAAA,MAAyHC,MAAM,GAAGL,KAAK,CAACK,MAAxI;AAAA,MAAgJC,UAAU,GAAGN,KAAK,CAACM,UAAnK;AAAA,MAA+KZ,KAAK,GAAGM,KAAK,CAACN,KAA7L;AAAA,MAAoML,MAAM,GAAGW,KAAK,CAACX,MAAnN;AAAA,MAA2NkB,OAAO,GAAGP,KAAK,CAACO,OAA3O;AAAA,MAAoPC,EAAE,GAAGR,KAAK,CAACS,MAA/P;AAAA,MAAuQA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA1S;AAAA,MAA8SE,MAAM,GAAGV,KAAK,CAACU,MAA7T;AAAA,MAAqUC,QAAQ,GAAGX,KAAK,CAACW,QAAtV;AAAA,MAAgWC,OAAO,GAAGZ,KAAK,CAACY,OAAhX;AAAA,MAAyXC,UAAU,GAAGb,KAAK,CAACa,UAA5Y;AAAA,MAAwZC,WAAW,GAAGd,KAAK,CAACc,WAA5a;AAAA,MAAybC,OAAO,GAAGf,KAAK,CAACe,OAAzc;AAAA,MAAkdC,KAAK,GAAGhB,KAAK,CAACgB,KAAhe;AAAA,MAAueC,QAAQ,GAAGjB,KAAK,CAACiB,QAAxf;AAAA,MAAkgBC,GAAG,GAAGlB,KAAK,CAACkB,GAA9gB;AAAA,MAAmhBC,MAAM,GAAGnB,KAAK,CAACmB,MAAliB;AAAA,MAA0iBC,SAAS,GAAGpB,KAAK,CAACoB,SAA5jB;AAAA,MAAukBC,eAAe,GAAGrB,KAAK,CAACqB,eAA/lB;AAAA,MAAgnBC,QAAQ,GAAGtB,KAAK,CAACsB,QAAjoB;AAAA,MAA2oBhC,IAAI,GAAGrC,MAAM,CAAC+C,KAAD,EAAQ,CAAC,SAAD,EAAY,WAAZ,EAAyB,SAAzB,EAAoC,QAApC,EAA8C,YAA9C,EAA4D,OAA5D,EAAqE,QAArE,EAA+E,SAA/E,EAA0F,QAA1F,EAAoG,QAApG,EAA8G,UAA9G,EAA0H,SAA1H,EAAqI,YAArI,EAAmJ,aAAnJ,EAAkK,SAAlK,EAA6K,OAA7K,EAAsL,UAAtL,EAAkM,KAAlM,EAAyM,QAAzM,EAAmN,WAAnN,EAAgO,iBAAhO,EAAmP,UAAnP,CAAR,CAAxpB;;AACA,MAAII,OAAO,GAAGb,SAAS,CAACS,KAAD,CAAvB;AACAvB,EAAAA,OAAO,CAAC0C,MAAM,KAAKI,SAAZ,EAAuB,8GAAvB,CAAP;AACA9C,EAAAA,OAAO,CAACwB,OAAO,KAAKsB,SAAb,EAAwB,+GAAxB,CAAP;;AACA,MAAIC,EAAE,GAAGhD,QAAQ,CAACrC,QAAQ,CAAC;AAAEkE,IAAAA,MAAM,EAAEA,MAAV;AACvBK,IAAAA,MAAM,EAAEA,MADe;AAEvBC,IAAAA,QAAQ,EAAEA,QAFa;AAGvBC,IAAAA,OAAO,EAAEA,OAHc;AAIvBI,IAAAA,KAAK,EAAEA,KAJgB;AAKvBC,IAAAA,QAAQ,EAAEA,QALa;AAMvBE,IAAAA,MAAM,EAAEA,MANe;AAOvBG,IAAAA,QAAQ,EAAEA;AAPa,GAAD,EAOAhC,IAPA,CAAT,CAAjB;AAAA,MAOkCmC,EAAE,GAAGD,EAAE,CAACC,EAP1C;AAAA,MAO8CC,EAAE,GAAGF,EAAE,CAACG,KAPtD;AAAA,MAO6DC,iBAAiB,GAAGF,EAAE,CAACf,QAPpF;AAAA,MAO8FkB,eAAe,GAAGH,EAAE,CAAChB,MAPnH;AAAA,MAO2HoB,KAAK,GAAGJ,EAAE,CAACI,KAPtI;AAAA,MAO6IC,UAAU,GAAGP,EAAE,CAACO,UAP7J;AAAA,MAOyKC,EAAE,GAAGR,EAAE,CAACS,IAPjL;AAAA,MAOuLC,KAAK,GAAGF,EAAE,CAACE,KAPlM;AAAA,MAOyMC,WAAW,GAAGH,EAAE,CAACG,WAP1N;AAAA,MAOuOC,OAAO,GAAGJ,EAAE,CAACI,OAPpP;;AAQA,MAAIC,WAAW,GAAGtE,WAAW,CAAC,UAAUuE,KAAV,EAAiBC,SAAjB,EAA4B;AACtD,QAAIC,QAAJ;;AACA,QAAI;AACA;AACAA,MAAAA,QAAQ,GAAGC,IAAI,CAACzB,KAAL,CAAWsB,KAAK,CAACI,MAAN,CAAaZ,KAAxB,CAAX;AACH,KAHD,CAIA,OAAO5E,CAAP,EAAU;AACN;AACAsF,MAAAA,QAAQ,GAAGF,KAAK,CAACI,MAAN,CAAaZ,KAAxB;AACH;;AACD,QAAIS,SAAJ,EAAe;AACXX,MAAAA,iBAAiB,CAACtE,cAAc,CAAEwE,KAAK,IAAI,EAAX,EAAgB,CAACU,QAAD,CAAhB,CAAf,CAAjB;AACH,KAFD,MAGK;AACDZ,MAAAA,iBAAiB,CAACE,KAAK,CAACa,MAAN,CAAa,UAAUC,CAAV,EAAa;AAAE,eAAOA,CAAC,IAAIJ,QAAZ;AAAuB,OAAnD,CAAD,CAAjB,CADC,CACwE;AAC5E;;AACDX,IAAAA,eAAe,GAhBuC,CAgBnC;AACtB,GAjB4B,EAiB1B,CAACD,iBAAD,EAAoBC,eAApB,EAAqCC,KAArC,CAjB0B,CAA7B;;AAkBA,MAAIvB,OAAJ,EAAa;AACT,WAAQzC,KAAK,CAAC+E,aAAN,CAAoB/D,OAApB,EAA6B;AAAEY,MAAAA,KAAK,EAAEA,KAAT;AAAgByB,MAAAA,MAAM,EAAEA,MAAxB;AAAgCF,MAAAA,QAAQ,EAAEA,QAA1C;AAAoDf,MAAAA,SAAS,EAAEA,SAA/D;AAA0E6B,MAAAA,UAAU,EAAEA;AAAtF,KAA7B,EACJjE,KAAK,CAAC+E,aAAN,CAAoB9D,cAApB,EAAoC,IAApC,CADI,CAAR;AAEH;;AACD,SAAQjB,KAAK,CAAC+E,aAAN,CAAoB1E,WAApB,EAAiChC,QAAQ,CAAC;AAAE2G,IAAAA,SAAS,EAAE,UAAb;AAAyBrC,IAAAA,MAAM,EAAEA,MAAjC;AAAyCyB,IAAAA,KAAK,EAAEE,OAAO,IAAI,CAAC,EAAEF,KAAK,IAAIC,WAAX,CAA5D;AAAqFjC,IAAAA,SAAS,EAAErB,UAAU,CAACuB,OAAO,CAACX,IAAT,EAAeS,SAAf;AAA1G,GAAD,EAAwIlB,iBAAiB,CAACM,IAAD,CAAzJ,CAAzC,EACJxB,KAAK,CAAC+E,aAAN,CAAoB3E,SAApB,EAA+B;AAAE4E,IAAAA,SAAS,EAAE,QAAb;AAAuB5C,IAAAA,SAAS,EAAEE,OAAO,CAACV;AAA1C,GAA/B,EACI5B,KAAK,CAAC+E,aAAN,CAAoBtE,UAApB,EAAgC;AAAEmB,IAAAA,KAAK,EAAEA,KAAT;AAAgByB,IAAAA,MAAM,EAAEA,MAAxB;AAAgCF,IAAAA,QAAQ,EAAEA,QAA1C;AAAoDc,IAAAA,UAAU,EAAEA;AAAhE,GAAhC,CADJ,CADI,EAGJjE,KAAK,CAAC+E,aAAN,CAAoBzE,SAApB,EAA+B;AAAE8C,IAAAA,GAAG,EAAEA;AAAP,GAA/B,EAA6CjB,OAAO,CAAC8C,GAAR,CAAY,UAAUC,MAAV,EAAkB;AAAE,WAAQlF,KAAK,CAAC+E,aAAN,CAAoBlE,sBAApB,EAA4C;AAAEsE,MAAAA,GAAG,EAAEhF,GAAG,CAAC+E,MAAD,EAASlC,WAAT,CAAV;AAAiCkC,MAAAA,MAAM,EAAEA,MAAzC;AAAiDvB,MAAAA,EAAE,EAAEA,EAArD;AAAyDd,MAAAA,QAAQ,EAAE0B,WAAnE;AAAgFtB,MAAAA,OAAO,EAAEA,OAAzF;AAAkGF,MAAAA,UAAU,EAAEA,UAA9G;AAA0HC,MAAAA,WAAW,EAAEA,WAAvI;AAAoJO,MAAAA,eAAe,EAAEA,eAArK;AAAsLS,MAAAA,KAAK,EAAEA;AAA7L,KAA5C,CAAR;AAA6P,GAA7R,CAA7C,CAHI,EAIJhE,KAAK,CAAC+E,aAAN,CAAoBxE,cAApB,EAAoC,IAApC,EACIP,KAAK,CAAC+E,aAAN,CAAoBjE,eAApB,EAAqC;AAAEwD,IAAAA,OAAO,EAAEA,OAAX;AAAoBF,IAAAA,KAAK,EAAEA,KAAK,IAAIC,WAApC;AAAiD7B,IAAAA,UAAU,EAAEA;AAA7D,GAArC,CADJ,CAJI,CAAR;AAMH,CAzCD;;AA0CAP,kBAAkB,CAACmD,SAAnB,GAA+B;AAC3BjD,EAAAA,OAAO,EAAEjC,SAAS,CAACmF,OAAV,CAAkBnF,SAAS,CAACoF,MAA5B,CADkB;AAE3BlD,EAAAA,SAAS,EAAElC,SAAS,CAACqF,MAFM;AAG3B3D,EAAAA,KAAK,EAAE1B,SAAS,CAACqF,MAHU;AAI3BlC,EAAAA,MAAM,EAAEnD,SAAS,CAACqF,MAJS;AAK3BtC,EAAAA,OAAO,EAAE/C,SAAS,CAACoF,MALQ;AAM3BvC,EAAAA,UAAU,EAAE7C,SAAS,CAACsF,SAAV,CAAoB,CAC5BtF,SAAS,CAACqF,MADkB,EAE5BrF,SAAS,CAACuF,IAFkB,EAG5BvF,SAAS,CAACwF,OAHkB,CAApB,CANe;AAW3B1C,EAAAA,WAAW,EAAE9C,SAAS,CAACqF,MAXI;AAY3BnC,EAAAA,GAAG,EAAElD,SAAS,CAACyF,IAZY;AAa3BxC,EAAAA,QAAQ,EAAEjD,SAAS,CAACqF,MAbO;AAc3BhC,EAAAA,eAAe,EAAErD,SAAS,CAACyF;AAdA,CAA/B;AAgBA1D,kBAAkB,CAAC2D,YAAnB,GAAkC;AAC9B3C,EAAAA,OAAO,EAAE,EADqB;AAE9BF,EAAAA,UAAU,EAAE,MAFkB;AAG9BC,EAAAA,WAAW,EAAE,IAHiB;AAI9BO,EAAAA,eAAe,EAAE,IAJa;AAK9BsC,EAAAA,SAAS,EAAE,IALmB;AAM9BzC,EAAAA,GAAG,EAAE;AANyB,CAAlC;AAQA,eAAenB,kBAAf","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useInput, warning } from 'ra-core';\nimport sanitizeInputRestProps from './sanitizeInputRestProps';\nimport CheckboxGroupInputItem from './CheckboxGroupInputItem';\nimport InputHelperText from './InputHelperText';\nimport classnames from 'classnames';\nimport Labeled from './Labeled';\nimport { LinearProgress } from '../layout';\nvar sanitizeRestProps = function (_a) {\n    var setFilter = _a.setFilter, setPagination = _a.setPagination, setSort = _a.setSort, loaded = _a.loaded, rest = __rest(_a, [\"setFilter\", \"setPagination\", \"setSort\", \"loaded\"]);\n    return sanitizeInputRestProps(rest);\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    root: {},\n    label: {\n        transform: 'translate(0, 8px) scale(0.75)',\n        transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right'),\n    },\n}); }, { name: 'RaCheckboxGroupInput' });\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceArrayInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\nvar CheckboxGroupInput = function (props) {\n    var _a = props.choices, choices = _a === void 0 ? [] : _a, className = props.className, classesOverride = props.classes, format = props.format, helperText = props.helperText, label = props.label, loaded = props.loaded, loading = props.loading, _b = props.margin, margin = _b === void 0 ? 'dense' : _b, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, optionText = props.optionText, optionValue = props.optionValue, options = props.options, parse = props.parse, resource = props.resource, row = props.row, source = props.source, translate = props.translate, translateChoice = props.translateChoice, validate = props.validate, rest = __rest(props, [\"choices\", \"className\", \"classes\", \"format\", \"helperText\", \"label\", \"loaded\", \"loading\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"optionText\", \"optionValue\", \"options\", \"parse\", \"resource\", \"row\", \"source\", \"translate\", \"translateChoice\", \"validate\"]);\n    var classes = useStyles(props);\n    warning(source === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the source prop\");\n    warning(choices === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the choices prop\");\n    var _c = useInput(__assign({ format: format,\n        onBlur: onBlur,\n        onChange: onChange,\n        onFocus: onFocus,\n        parse: parse,\n        resource: resource,\n        source: source,\n        validate: validate }, rest)), id = _c.id, _d = _c.input, finalFormOnChange = _d.onChange, finalFormOnBlur = _d.onBlur, value = _d.value, isRequired = _c.isRequired, _e = _c.meta, error = _e.error, submitError = _e.submitError, touched = _e.touched;\n    var handleCheck = useCallback(function (event, isChecked) {\n        var newValue;\n        try {\n            // try to convert string value to number, e.g. '123'\n            newValue = JSON.parse(event.target.value);\n        }\n        catch (e) {\n            // impossible to convert value, e.g. 'abc'\n            newValue = event.target.value;\n        }\n        if (isChecked) {\n            finalFormOnChange(__spreadArrays((value || []), [newValue]));\n        }\n        else {\n            finalFormOnChange(value.filter(function (v) { return v != newValue; })); // eslint-disable-line eqeqeq\n        }\n        finalFormOnBlur(); // HACK: See https://github.com/final-form/react-final-form/issues/365#issuecomment-515045503\n    }, [finalFormOnChange, finalFormOnBlur, value]);\n    if (loading) {\n        return (React.createElement(Labeled, { label: label, source: source, resource: resource, className: className, isRequired: isRequired },\n            React.createElement(LinearProgress, null)));\n    }\n    return (React.createElement(FormControl, __assign({ component: \"fieldset\", margin: margin, error: touched && !!(error || submitError), className: classnames(classes.root, className) }, sanitizeRestProps(rest)),\n        React.createElement(FormLabel, { component: \"legend\", className: classes.label },\n            React.createElement(FieldTitle, { label: label, source: source, resource: resource, isRequired: isRequired })),\n        React.createElement(FormGroup, { row: row }, choices.map(function (choice) { return (React.createElement(CheckboxGroupInputItem, { key: get(choice, optionValue), choice: choice, id: id, onChange: handleCheck, options: options, optionText: optionText, optionValue: optionValue, translateChoice: translateChoice, value: value })); })),\n        React.createElement(FormHelperText, null,\n            React.createElement(InputHelperText, { touched: touched, error: error || submitError, helperText: helperText }))));\n};\nCheckboxGroupInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    label: PropTypes.string,\n    source: PropTypes.string,\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    row: PropTypes.bool,\n    resource: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\nCheckboxGroupInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n    fullWidth: true,\n    row: true,\n};\nexport default CheckboxGroupInput;\n"]},"metadata":{},"sourceType":"module"}