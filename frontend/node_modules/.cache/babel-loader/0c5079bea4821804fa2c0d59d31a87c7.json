{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport get from 'lodash/get';\nimport { useMemo } from 'react';\nimport { CRUD_GET_MANY_REFERENCE } from '../actions/dataActions/crudGetManyReference';\nimport useQueryWithStore from './useQueryWithStore';\nimport { getIds, getTotal, nameRelatedTo } from '../reducer/admin/references/oneToMany';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The referenced resource name, e.g. 'comments'\n * @param {string} target The target resource key, e.g. 'post_id'\n * @param {Object} id The identifier of the record to look for in 'target'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { body: 'hello, world' }\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to generate a cache key\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetManyReference } from 'react-admin';\n *\n * const PostComments = ({ post_id }) => {\n *     const { data, ids, loading, error } = useGetManyReference(\n *         'comments',\n *         'post_id',\n *         post_id,\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *         {},\n *         'posts',\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].body}</li>\n *     )}</ul>;\n * };\n */\n\nvar useGetManyReference = function (resource, target, id, pagination, sort, filter, referencingResource, options) {\n  var relatedTo = useMemo(function () {\n    return nameRelatedTo(resource, id, referencingResource, target, filter);\n  }, [filter, resource, id, referencingResource, target]);\n\n  var _a = useQueryWithStore({\n    type: 'getManyReference',\n    resource: resource,\n    payload: {\n      target: target,\n      id: id,\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, __assign(__assign({}, options), {\n    relatedTo: relatedTo,\n    action: CRUD_GET_MANY_REFERENCE\n  }), // ids and data selector\n  function (state) {\n    return {\n      ids: getIds(state, relatedTo) || defaultIds,\n      allRecords: get(state.admin.resources, [resource, 'data'], defaultData)\n    };\n  }, function (state) {\n    return getTotal(state, relatedTo);\n  }),\n      _b = _a.data,\n      ids = _b.ids,\n      allRecords = _b.allRecords,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var data = useMemo(function () {\n    return ids === null ? defaultData : ids.map(function (id) {\n      return allRecords[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, [ids, allRecords]);\n  return {\n    data: data,\n    ids: ids,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\n\nexport default useGetManyReference;","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/useGetManyReference.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","get","useMemo","CRUD_GET_MANY_REFERENCE","useQueryWithStore","getIds","getTotal","nameRelatedTo","defaultIds","defaultData","useGetManyReference","resource","target","id","pagination","sort","filter","referencingResource","options","relatedTo","_a","type","payload","action","state","ids","allRecords","admin","resources","_b","data","total","error","loading","loaded","map","reduce","acc","record"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport get from 'lodash/get';\nimport { useMemo } from 'react';\nimport { CRUD_GET_MANY_REFERENCE } from '../actions/dataActions/crudGetManyReference';\nimport useQueryWithStore from './useQueryWithStore';\nimport { getIds, getTotal, nameRelatedTo, } from '../reducer/admin/references/oneToMany';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getManyReference() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The referenced resource name, e.g. 'comments'\n * @param {string} target The target resource key, e.g. 'post_id'\n * @param {Object} id The identifier of the record to look for in 'target'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { body: 'hello, world' }\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to generate a cache key\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetManyReference } from 'react-admin';\n *\n * const PostComments = ({ post_id }) => {\n *     const { data, ids, loading, error } = useGetManyReference(\n *         'comments',\n *         'post_id',\n *         post_id,\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *         {},\n *         'posts',\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].body}</li>\n *     )}</ul>;\n * };\n */\nvar useGetManyReference = function (resource, target, id, pagination, sort, filter, referencingResource, options) {\n    var relatedTo = useMemo(function () { return nameRelatedTo(resource, id, referencingResource, target, filter); }, [filter, resource, id, referencingResource, target]);\n    var _a = useQueryWithStore({\n        type: 'getManyReference',\n        resource: resource,\n        payload: { target: target, id: id, pagination: pagination, sort: sort, filter: filter },\n    }, __assign(__assign({}, options), { relatedTo: relatedTo, action: CRUD_GET_MANY_REFERENCE }), \n    // ids and data selector\n    function (state) { return ({\n        ids: getIds(state, relatedTo) || defaultIds,\n        allRecords: get(state.admin.resources, [resource, 'data'], defaultData),\n    }); }, function (state) { return getTotal(state, relatedTo); }), _b = _a.data, ids = _b.ids, allRecords = _b.allRecords, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded;\n    var data = useMemo(function () {\n        return ids === null\n            ? defaultData\n            : ids\n                .map(function (id) { return allRecords[id]; })\n                .reduce(function (acc, record) {\n                if (!record)\n                    return acc;\n                acc[record.id] = record;\n                return acc;\n            }, {});\n    }, [ids, allRecords]);\n    return { data: data, ids: ids, total: total, error: error, loading: loading, loaded: loaded };\n};\nexport default useGetManyReference;\n"]},"metadata":{},"sourceType":"module"}